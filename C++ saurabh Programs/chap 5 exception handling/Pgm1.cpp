//pgm to divide 2 numbers and to generate an exception is user enters denominator //0, and to make user keep on reentering correct denominator till user enters non //zero denominator and after user enters non zero denominator then the 2 numbers //must be divided and division must be displayed on screen

#include<iostream>
using namespace std;


class DivisionException
{
	int a,b;
	
	public:
	DivisionException();
	void division();
	
};

DivisionException::DivisionException()
{
	cout<<"\n Enter the numerator:";
	cin>>a;

	while(1)
	{
		try
		{
			cout<<"\n Enter the denominator:";
			cin>>b;
			if(b==0)
			{
				throw 1;
			}	
			cout<<"\n The denominator entered is correct";
			break;
		}
		
		catch(int i)
		{
			cout<<"\n The denominator is invalid. You cannot enter a non zero denominator. Please reenter:";
			
		}
		
	}
/*
Here we have mentioned an infinite while loop. An infinite while loop is one whose condition is always true. Here because we have mentioned 1 as condition of while loop and 1 means true so the above loop is an infinite while loop. 

try and catch are keywords in C++. try block is that block in which exception is generated. catch block is a block for catching or handling the exception.

Here if the value of denominator b entered is 0, then condition of if block b==0 is true. So the body of the if block executes and the throw 1 statement inside body of if block will execute and it will generate an exception of type int because 1 mentioned in the throw statement is an integer value. It is not necessary to mention 1 in the throw statement for generating an int type of exception. Even if we mention any integer value in the throw statement it will still generate an int type of exception. 

After the throw statement inside the if block which is inside the try block executes, then the throw 1 statement will generate an int type of exception. The remaining statements inside the try block are skipped and control will go to the catch block with formal parameter of type int.

The catch block is an exception handler. The catch block must always be associated with a try block. If the type of exception being generated in the try block matches the data type of the parameter of catch block, then only the catch block associated with the try block is executed.

So here if condition b==0 is true in the if block, then the int type of exception is generated by throw 1, and the remaining statements inside the try block are skipped and control will directly go to the catch block with int parameter. The catch block will execute and it will catch and handle the exception and so execution of the constructor of class  DivisionException in whose body we have written the while loop is not terminated. Because the try catch blocks have been written inside the infinite while loop, the if the user enters denominator 0 i.e. value of b is 0, then because for b=0, the exception of type int is generated, so the remaining statements in the try block are skipped and so break statement also doesnt execute and so loop will keep executing again and again if user keeps entering value of b as 0.

But if user enters a value of b which is not 0, then the condition b==0 of the if block is false. So the body of if block inside try block is not executed, So remaining 2 statements after if block inside try block cout<<"\n The denominator entered is correct" and break are executed. Afetr break statement is executed the execution of loop is ended.

So till user doesnt enter value of b as non zero loop keeps executing and keeps accepting denominator value of b from user.

*/
}

void DivisionException::division()
{
	float res=((float)a)/b;

	cout<<"\n The result of division is "<<res;

}

int main()
{
	DivisionException e1;

	e1.division();

	return 0;
}